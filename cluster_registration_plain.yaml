apiVersion: v1
kind: Secret
metadata:
  namespace: kube-system
  name: cluster-registration
stringData:
  RANCHER_BEARER_TOKEN: ...
  RANCHER_HOSTNAME: ...
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: kube-system
  name: cluster-registration
data:
  cluster-registration.sh: |
    #!/usr/bin/env bash

    set -xe

    if ! kubectl get namespace cattle-system; then
      cluster=$(curl --insecure "https://${RANCHER_HOSTNAME}/v3/cluster?_replace=true" \
      -X 'POST' \
      -u "${RANCHER_BEARER_TOKEN}" \
      -H 'Content-Type: application/json' \
      -H 'Accept: application/json' \
      --data-binary "{\"name\":\"${CLUSTER_NAME}\"}")

      cluster_id=$(echo ${cluster} | jq -r '.id')

      sleep 10

      registration_token=$(curl --insecure "https://${RANCHER_HOSTNAME}/v3/clusterregistrationtoken" \
      -X 'POST' \
      -u "${RANCHER_BEARER_TOKEN}" \
      -H 'Content-Type: application/json' \
      -H 'Accept: application/json' \
      --data-binary "{\"type\":\"clusterRegistrationToken\",\"clusterId\":\"${cluster_id}\"}")

      cmd=$(echo ${registration_token} | jq -r '.insecureCommand')

      bash -c "${cmd}"
    fi
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-registration
subjects:
- kind: ServiceAccount
  name: cluster-registration
  namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: default
  name: cluster-registration
---
apiVersion: batch/v1
kind: Job
metadata:
  namespace: default
  name: cluster-registration
spec:
  backoffLimit: 1
  template:
    spec:
      serviceAccountName: cluster-registration
      restartPolicy: Never
      containers:
        - name: cluster-registration
          image: bashofmann/kubectl-jq:latest
          command:
            - bash
            - /app/cluster-registration.sh
          volumeMounts:
            - mountPath: /app
              name: script
          env:
            - name: CLUSTER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          envFrom:
            - secretRef:
                name: cluster-registration
      volumes:
        - name: script
          configMap:
            name: cluster-registration